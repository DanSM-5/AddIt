import React, { useState, useEffect, useContext, memo } from 'react';
import { StyleSheet, View, Text, ScrollView } from 'react-native';
import { Picker } from '@react-native-community/picker';
import { getTimerOption, setTimerOption} from '../js/timerOptions';
import { getLanguageOption, setLanguageOption} from '../js/languageOptions';
import { Card, CheckBox } from 'react-native-elements';
import LanguageContext from '../components/LanguageContext';
import LoadingMessage from '../components/LoadingMessage';
import useStored from '../js/useStored';

const SettingsPage = () => {

    const sysConfig = useContext(LanguageContext);
    const lang = sysConfig.language;
    const [ timerOption, loadingTimer ] = useStored(getTimerOption, lang.timerOptions.Circular);
    const [ languageOption, loadingLanguage ] = useStored(getLanguageOption, lang.languages.English);
    const [ timer, setTimer] = useState('');
    const [ language, setLanguage] = useState('');

    useEffect(() => {
        setTimer(timerOption);
        setLanguage(languageOption);
        console.log('rendering');
    }, [timerOption, languageOption]);

    console.log("You get////////////");
    console.log(timerOption);
    console.log(languageOption);

    // useEffect(() => {
    //     const setInitial = async () => {
    //         const timerOption = await getTimerOption();
    //         if (timerOption !== timer) {
    //             setTimer(timerOption);
    //         }
            
    //         const languageOption = await getLanguageOption();
    //         if (language !== languageOption) {
    //             setLanguage(languageOption);
    //         }
    //     };
    //     setInitial();
    // }, []);
    
    const onPressTimerOption = async (type) => {
        setTimer(type);
        await setTimerOption(type);
    }
    const onLanguageValueChanged = async (lang) => {
        setLanguage(lang);
        await setLanguageOption(lang);
        sysConfig.setLanguage(lang);
    }

    const generateTimerOptions = () => Object.keys(lang.timerOptions)
        .map((o, index) => (
            <View key={index} >
                <CheckBox 
                    checked={timer === o}
                    center
                    title={lang.timerOptions[o]}
                    checkedIcon='dot-circle-o'
                    uncheckedIcon='circle-o'
                    onPress={async () => await onPressTimerOption(o)}
                />
            </View>
        ));

    const generatePickerItems = 
        () => Object.keys(lang.languages)
            .reduce((acc, curr) => curr === language ? [curr, ...acc] : [...acc, curr],[])
            .map((l, index) => (<Picker.Item label={lang.languages[l]} value={l} key={index}/>));
    
    // if (language === '') {
    //     return (<LoadingMessage message={lang.loading}/>
    // )}
    
    return (
    <ScrollView style={styles.container}>
        <View style={styles.center}>
            <Card title="Display Timer" >
                { loadingTimer
                    ? <LoadingMessage message={lang.loading} />
                    :<><Text style={styles.text}>
                        {lang.timerDescription }
                    </Text>
                    <View>
                        {generateTimerOptions()}
                    </View></>
                }
            </Card>
            <Card title={lang.language}>
                { loadingLanguage
                    ? <LoadingMessage message={lang.loading} />
                    : <><Text>{lang.languageDescription}</Text>
                        <Picker
                            selectedValue={language}
                            onValueChange={async (itemValue) => await onLanguageValueChanged(itemValue)}
                        >
                        { generatePickerItems() }
                    </Picker></>
                }
            </Card>
        </View>
    </ScrollView>
    );
};

const styles = StyleSheet.create({
    center: {
        flex: 1,
    },
    loadingView:{
        flex:1,
        justifyContent: "center", 
        alignItems: "center",
    },
    loadingText:{
        fontSize: 25,
    },
    text:{
        textAlign:"center",
    },
    container:{
        paddingBottom: 20,
        marginBottom: 10,
    },
});

export default SettingsPage;